[
  {
    "id": 1,
    "question": "O que é Quality Assurance (QA)?",
    "options": [
      "Um processo para encontrar bugs no software",
      "Um conjunto de atividades para garantir a qualidade do processo de desenvolvimento",
      "Uma ferramenta de automação de testes",
      "Um tipo de teste de performance"
    ],
    "correct": 1,
    "explanation": "Quality Assurance é um conjunto de atividades sistemáticas implementadas em um sistema de qualidade para garantir que os requisitos de qualidade sejam atendidos durante todo o processo de desenvolvimento."
  },
  {
    "id": 2,
    "question": "Qual é a diferença entre QA e QC?",
    "options": [
      "QA e QC são a mesma coisa",
      "QA é preventivo, QC é reativo",
      "QA é reativo, QC é preventivo",
      "QA é apenas para testes manuais, QC para automação"
    ],
    "correct": 1,
    "explanation": "QA (Quality Assurance) é preventivo e foca no processo para evitar defeitos, enquanto QC (Quality Control) é reativo e foca na identificação de defeitos no produto."
  },
  {
    "id": 3,
    "question": "O que é um caso de teste?",
    "options": [
      "Um bug encontrado no sistema",
      "Um documento que especifica condições, dados de entrada e resultados esperados",
      "Uma ferramenta de automação",
      "Um tipo de defeito"
    ],
    "correct": 1,
    "explanation": "Um caso de teste é um documento que especifica as condições de teste, dados de entrada, ações a serem executadas e resultados esperados para verificar um requisito específico."
  },
  {
    "id": 4,
    "question": "Qual é o objetivo principal do teste de software?",
    "options": [
      "Provar que o software não tem bugs",
      "Encontrar todos os bugs possíveis",
      "Reduzir o risco de falhas em produção",
      "Acelerar o desenvolvimento"
    ],
    "correct": 2,
    "explanation": "O objetivo principal do teste é reduzir o risco de falhas em produção, fornecendo informações sobre a qualidade do software para stakeholders."
  },
  {
    "id": 5,
    "question": "O que são testes funcionais?",
    "options": [
      "Testes que verificam a performance do sistema",
      "Testes que verificam se o sistema funciona conforme especificado",
      "Testes que verificam a segurança",
      "Testes que verificam a usabilidade"
    ],
    "correct": 1,
    "explanation": "Testes funcionais verificam se o sistema funciona conforme especificado nos requisitos, testando as funcionalidades sem considerar a estrutura interna do código."
  },
  {
    "id": 6,
    "question": "O que é teste de caixa preta?",
    "options": [
      "Teste baseado na estrutura interna do código",
      "Teste baseado nos requisitos e especificações",
      "Teste de performance",
      "Teste de segurança"
    ],
    "correct": 1,
    "explanation": "Teste de caixa preta é uma técnica onde o testador não conhece a estrutura interna do código e testa baseado apenas nos requisitos e especificações."
  },
  {
    "id": 7,
    "question": "O que é teste de caixa branca?",
    "options": [
      "Teste baseado apenas nos requisitos",
      "Teste baseado na estrutura interna do código",
      "Teste de interface do usuário",
      "Teste de aceitação"
    ],
    "correct": 1,
    "explanation": "Teste de caixa branca é uma técnica onde o testador conhece a estrutura interna do código e projeta casos de teste baseados nessa estrutura."
  },
  {
    "id": 8,
    "question": "O que é um defeito (bug)?",
    "options": [
      "Uma funcionalidade não implementada",
      "Um desvio do comportamento esperado",
      "Uma melhoria sugerida",
      "Um requisito não documentado"
    ],
    "correct": 1,
    "explanation": "Um defeito é um desvio do comportamento esperado do software, causado por um erro no código, design ou especificação."
  },
  {
    "id": 9,
    "question": "Qual é a diferença entre erro, defeito e falha?",
    "options": [
      "São todos sinônimos",
      "Erro é humano, defeito é no código, falha é no sistema",
      "Erro é no sistema, defeito é humano, falha é no código",
      "Não há diferença prática"
    ],
    "correct": 1,
    "explanation": "Erro é um engano humano, defeito é a manifestação do erro no código, e falha é quando o defeito causa um comportamento incorreto do sistema."
  },
  {
    "id": 10,
    "question": "O que é teste de regressão?",
    "options": [
      "Teste de funcionalidades novas",
      "Teste para verificar se mudanças não afetaram funcionalidades existentes",
      "Teste de performance",
      "Teste de segurança"
    ],
    "correct": 1,
    "explanation": "Teste de regressão verifica se mudanças no software (correções, melhorias, novas funcionalidades) não introduziram novos defeitos em funcionalidades já testadas."
  },
  {
    "id": 11,
    "question": "O que é o ciclo de vida de desenvolvimento de software (SDLC)?",
    "options": [
      "Apenas a fase de codificação",
      "O processo completo de desenvolvimento desde a concepção até a manutenção",
      "Apenas a fase de testes",
      "O tempo de vida útil do software"
    ],
    "correct": 1,
    "explanation": "SDLC é o processo completo que inclui planejamento, análise, design, implementação, testes, deployment e manutenção do software."
  },
  {
    "id": 12,
    "question": "O que é o modelo V (V-Model)?",
    "options": [
      "Um tipo de defeito",
      "Um modelo de desenvolvimento onde cada fase de desenvolvimento tem uma fase de teste correspondente",
      "Uma ferramenta de automação",
      "Um tipo de teste"
    ],
    "correct": 1,
    "explanation": "O modelo V é um modelo de desenvolvimento onde cada fase de desenvolvimento tem uma fase de teste correspondente, enfatizando a verificação e validação."
  },
  {
    "id": 13,
    "question": "O que são testes de unidade?",
    "options": [
      "Testes de todo o sistema",
      "Testes de componentes individuais isoladamente",
      "Testes de interface",
      "Testes de aceitação"
    ],
    "correct": 1,
    "explanation": "Testes de unidade verificam componentes individuais (funções, métodos, classes) isoladamente para garantir que funcionem corretamente."
  },
  {
    "id": 14,
    "question": "O que são testes de integração?",
    "options": [
      "Testes de componentes isolados",
      "Testes da interação entre componentes integrados",
      "Testes de performance",
      "Testes de usabilidade"
    ],
    "correct": 1,
    "explanation": "Testes de integração verificam a interação entre componentes ou sistemas integrados para detectar defeitos de interface."
  },
  {
    "id": 15,
    "question": "O que são testes de sistema?",
    "options": [
      "Testes de componentes individuais",
      "Testes do sistema completo em ambiente que simula o ambiente de produção",
      "Testes de código",
      "Testes de documentação"
    ],
    "correct": 1,
    "explanation": "Testes de sistema verificam o comportamento do sistema completo em um ambiente que simula o ambiente de produção."
  },
  {
    "id": 16,
    "question": "O que são testes de aceitação?",
    "options": [
      "Testes técnicos realizados por desenvolvedores",
      "Testes realizados para determinar se o sistema atende aos critérios de aceitação",
      "Testes de performance",
      "Testes de segurança"
    ],
    "correct": 1,
    "explanation": "Testes de aceitação determinam se o sistema atende aos critérios de aceitação e está pronto para entrega ao usuário final."
  },
  {
    "id": 17,
    "question": "O que é teste alfa?",
    "options": [
      "Teste realizado pelo cliente",
      "Teste realizado internamente pela organização desenvolvedora",
      "Teste de performance",
      "Teste automatizado"
    ],
    "correct": 1,
    "explanation": "Teste alfa é realizado internamente pela organização desenvolvedora, geralmente em ambiente controlado antes do lançamento."
  },
  {
    "id": 18,
    "question": "O que é teste beta?",
    "options": [
      "Teste interno da empresa",
      "Teste realizado por usuários finais em ambiente real",
      "Teste de código",
      "Teste de documentação"
    ],
    "correct": 1,
    "explanation": "Teste beta é realizado por usuários finais em ambiente real, após o teste alfa, para obter feedback antes do lançamento oficial."
  },
  {
    "id": 19,
    "question": "O que é automação de testes?",
    "options": [
      "Testes realizados apenas manualmente",
      "Uso de ferramentas para executar testes automaticamente",
      "Testes de performance",
      "Testes de usabilidade"
    ],
    "correct": 1,
    "explanation": "Automação de testes é o uso de ferramentas e scripts para executar testes automaticamente, reduzindo esforço manual e aumentando eficiência."
  },
  {
    "id": 20,
    "question": "Quando é recomendado automatizar testes?",
    "options": [
      "Sempre, em todos os casos",
      "Para testes repetitivos, estáveis e com ROI positivo",
      "Nunca, testes manuais são sempre melhores",
      "Apenas para testes de performance"
    ],
    "correct": 1,
    "explanation": "Automação é recomendada para testes repetitivos, estáveis, com boa cobertura e que proporcionem retorno sobre investimento positivo."
  },
  {
    "id": 21,
    "question": "O que é um plano de teste?",
    "options": [
      "Um caso de teste específico",
      "Um documento que descreve a estratégia, objetivos e recursos para teste",
      "Uma ferramenta de automação",
      "Um tipo de defeito"
    ],
    "correct": 1,
    "explanation": "Um plano de teste é um documento que descreve a estratégia, objetivos, recursos, cronograma e atividades de teste para um projeto."
  },
  {
    "id": 22,
    "question": "O que é cobertura de teste?",
    "options": [
      "O número de bugs encontrados",
      "A medida de quanto do software foi exercitado pelos testes",
      "O tempo gasto em testes",
      "O número de testadores"
    ],
    "correct": 1,
    "explanation": "Cobertura de teste é uma medida que indica quanto do software (código, requisitos, funcionalidades) foi exercitado pelos testes."
  },
  {
    "id": 23,
    "question": "O que é teste de performance?",
    "options": [
      "Teste de funcionalidades",
      "Teste que avalia velocidade, estabilidade e escalabilidade",
      "Teste de interface",
      "Teste de segurança"
    ],
    "correct": 1,
    "explanation": "Teste de performance avalia características como velocidade, estabilidade, escalabilidade e uso de recursos do sistema sob diferentes cargas."
  },
  {
    "id": 24,
    "question": "O que é teste de carga?",
    "options": [
      "Teste com carga normal esperada",
      "Teste com carga máxima suportada",
      "Teste de funcionalidades",
      "Teste de interface"
    ],
    "correct": 0,
    "explanation": "Teste de carga verifica o comportamento do sistema sob carga normal esperada de usuários e transações."
  },
  {
    "id": 25,
    "question": "O que é teste de estresse?",
    "options": [
      "Teste com carga normal",
      "Teste além dos limites normais de operação",
      "Teste de funcionalidades",
      "Teste de usabilidade"
    ],
    "correct": 1,
    "explanation": "Teste de estresse verifica o comportamento do sistema além dos limites normais de operação para identificar pontos de falha."
  },
  {
    "id": 26,
    "question": "O que é teste de usabilidade?",
    "options": [
      "Teste de performance",
      "Teste da facilidade de uso e experiência do usuário",
      "Teste de segurança",
      "Teste de código"
    ],
    "correct": 1,
    "explanation": "Teste de usabilidade avalia a facilidade de uso, eficiência e satisfação do usuário ao interagir com o sistema."
  },
  {
    "id": 27,
    "question": "O que é teste de segurança?",
    "options": [
      "Teste de performance",
      "Teste que verifica vulnerabilidades e proteção de dados",
      "Teste de funcionalidades",
      "Teste de interface"
    ],
    "correct": 1,
    "explanation": "Teste de segurança verifica vulnerabilidades, proteção de dados, autenticação, autorização e outras características de segurança."
  },
  {
    "id": 28,
    "question": "O que é BDD (Behavior Driven Development)?",
    "options": [
      "Uma linguagem de programação",
      "Uma abordagem que foca no comportamento esperado do software",
      "Uma ferramenta de teste",
      "Um tipo de defeito"
    ],
    "correct": 1,
    "explanation": "BDD é uma abordagem de desenvolvimento que foca na definição do comportamento esperado do software através de exemplos em linguagem natural."
  },
  {
    "id": 29,
    "question": "O que é TDD (Test Driven Development)?",
    "options": [
      "Escrever código antes dos testes",
      "Escrever testes antes do código de produção",
      "Uma ferramenta de automação",
      "Um tipo de teste"
    ],
    "correct": 1,
    "explanation": "TDD é uma prática onde os testes são escritos antes do código de produção, seguindo o ciclo Red-Green-Refactor."
  },
  {
    "id": 30,
    "question": "O que é Gherkin?",
    "options": [
      "Uma ferramenta de automação",
      "Uma linguagem para escrever cenários de teste em BDD",
      "Um tipo de defeito",
      "Uma metodologia de desenvolvimento"
    ],
    "correct": 1,
    "explanation": "Gherkin é uma linguagem de domínio específico usada para escrever cenários de teste em formato legível por humanos no contexto de BDD."
  },
  {
    "id": 31,
    "question": "Qual palavra-chave do Gherkin inicia um cenário?",
    "options": [
      "Given",
      "When",
      "Then",
      "Scenario"
    ],
    "correct": 3,
    "explanation": "A palavra-chave 'Scenario' é usada para iniciar um cenário de teste em Gherkin."
  },
  {
    "id": 32,
    "question": "O que representa 'Given' em Gherkin?",
    "options": [
      "A ação executada",
      "O resultado esperado",
      "O contexto ou pré-condição",
      "O título do cenário"
    ],
    "correct": 2,
    "explanation": "'Given' representa o contexto ou pré-condições que devem estar estabelecidas antes da execução do teste."
  },
  {
    "id": 33,
    "question": "O que representa 'When' em Gherkin?",
    "options": [
      "O contexto inicial",
      "A ação ou evento que ocorre",
      "O resultado esperado",
      "Uma condição"
    ],
    "correct": 1,
    "explanation": "'When' representa a ação ou evento que é executado durante o teste."
  },
  {
    "id": 34,
    "question": "O que representa 'Then' em Gherkin?",
    "options": [
      "O contexto inicial",
      "A ação executada",
      "O resultado ou comportamento esperado",
      "Uma pré-condição"
    ],
    "correct": 2,
    "explanation": "'Then' representa o resultado ou comportamento esperado após a execução da ação."
  },
  {
    "id": 35,
    "question": "O que é um teste de fumaça (smoke test)?",
    "options": [
      "Teste completo de todas as funcionalidades",
      "Teste básico para verificar se as principais funcionalidades funcionam",
      "Teste de performance",
      "Teste de segurança"
    ],
    "correct": 1,
    "explanation": "Teste de fumaça é um teste básico que verifica se as principais funcionalidades do sistema funcionam após uma nova build ou deployment."
  },
  {
    "id": 36,
    "question": "O que é teste de sanidade?",
    "options": [
      "Teste completo do sistema",
      "Teste focado em funcionalidades específicas após mudanças menores",
      "Teste de performance",
      "Teste de usabilidade"
    ],
    "correct": 1,
    "explanation": "Teste de sanidade é um subconjunto do teste de regressão, focado em funcionalidades específicas após mudanças menores."
  },
  {
    "id": 37,
    "question": "O que é um ambiente de teste?",
    "options": [
      "O código fonte do sistema",
      "A infraestrutura onde os testes são executados",
      "Uma ferramenta de automação",
      "Um tipo de defeito"
    ],
    "correct": 1,
    "explanation": "Ambiente de teste é a infraestrutura (hardware, software, rede, dados) onde os testes são executados."
  },
  {
    "id": 38,
    "question": "O que são dados de teste?",
    "options": [
      "Resultados dos testes",
      "Informações usadas como entrada para execução dos testes",
      "Relatórios de defeitos",
      "Ferramentas de teste"
    ],
    "correct": 1,
    "explanation": "Dados de teste são informações específicas usadas como entrada para a execução dos casos de teste."
  },
  {
    "id": 39,
    "question": "O que é rastreabilidade em testes?",
    "options": [
      "Velocidade de execução dos testes",
      "Capacidade de rastrear relacionamentos entre requisitos, casos de teste e defeitos",
      "Número de testes executados",
      "Tempo gasto em testes"
    ],
    "correct": 1,
    "explanation": "Rastreabilidade é a capacidade de rastrear relacionamentos entre requisitos, casos de teste, execuções e defeitos."
  },
  {
    "id": 40,
    "question": "O que é um oráculo de teste?",
    "options": [
      "Uma ferramenta de automação",
      "Um mecanismo para determinar se o resultado do teste está correto",
      "Um tipo de defeito",
      "Um ambiente de teste"
    ],
    "correct": 1,
    "explanation": "Oráculo de teste é um mecanismo (pessoa, documento, ferramenta) usado para determinar se o resultado de um teste está correto."
  },
  {
    "id": 41,
    "question": "O que é análise de valor limite?",
    "options": [
      "Teste de performance",
      "Técnica que testa valores nos limites de partições equivalentes",
      "Teste de usabilidade",
      "Análise de código"
    ],
    "correct": 1,
    "explanation": "Análise de valor limite é uma técnica de teste que foca em valores nos limites das partições equivalentes, onde defeitos são mais prováveis."
  },
  {
    "id": 42,
    "question": "O que é particionamento de equivalência?",
    "options": [
      "Divisão do código em módulos",
      "Técnica que divide dados de entrada em grupos que devem ser tratados igualmente",
      "Teste de performance",
      "Análise de requisitos"
    ],
    "correct": 1,
    "explanation": "Particionamento de equivalência divide dados de entrada em grupos (partições) onde todos os valores devem ser tratados de forma similar pelo sistema."
  },
  {
    "id": 43,
    "question": "O que é teste de tabela de decisão?",
    "options": [
      "Teste de banco de dados",
      "Técnica para testar combinações de condições e ações",
      "Teste de interface",
      "Teste de performance"
    ],
    "correct": 1,
    "explanation": "Teste de tabela de decisão é uma técnica para testar diferentes combinações de condições de entrada e suas ações correspondentes."
  },
  {
    "id": 44,
    "question": "O que é teste de transição de estado?",
    "options": [
      "Teste de banco de dados",
      "Técnica para testar mudanças de estado do sistema",
      "Teste de performance",
      "Teste de código"
    ],
    "correct": 1,
    "explanation": "Teste de transição de estado verifica se o sistema muda corretamente de um estado para outro baseado em eventos ou condições."
  },
  {
    "id": 45,
    "question": "O que é cobertura de código?",
    "options": [
      "Número de linhas de código",
      "Percentual do código exercitado pelos testes",
      "Qualidade do código",
      "Velocidade de execução"
    ],
    "correct": 1,
    "explanation": "Cobertura de código é uma métrica que indica o percentual do código fonte que foi exercitado durante a execução dos testes."
  },
  {
    "id": 46,
    "question": "O que é cobertura de declaração?",
    "options": [
      "Cobertura de requisitos",
      "Percentual de declarações de código executadas",
      "Cobertura de casos de teste",
      "Cobertura de defeitos"
    ],
    "correct": 1,
    "explanation": "Cobertura de declaração mede o percentual de declarações (statements) de código que foram executadas pelos testes."
  },
  {
    "id": 47,
    "question": "O que é cobertura de decisão?",
    "options": [
      "Cobertura de requisitos",
      "Percentual de pontos de decisão (if, while) exercitados",
      "Cobertura de casos de teste",
      "Cobertura de usuários"
    ],
    "correct": 1,
    "explanation": "Cobertura de decisão mede o percentual de pontos de decisão (como if, while) que foram exercitados com resultados verdadeiro e falso."
  },
  {
    "id": 48,
    "question": "O que é um stub em testes?",
    "options": [
      "Um tipo de defeito",
      "Um componente simulado que fornece respostas predefinidas",
      "Uma ferramenta de automação",
      "Um ambiente de teste"
    ],
    "correct": 1,
    "explanation": "Stub é um componente simulado que substitui um componente real e fornece respostas predefinidas durante os testes."
  },
  {
    "id": 49,
    "question": "O que é um mock em testes?",
    "options": [
      "Um ambiente de produção",
      "Um objeto simulado que verifica interações e comportamentos",
      "Um tipo de teste",
      "Uma ferramenta de relatório"
    ],
    "correct": 1,
    "explanation": "Mock é um objeto simulado que não apenas substitui um componente real, mas também verifica se as interações esperadas ocorreram."
  },
  {
    "id": 50,
    "question": "O que é integração contínua (CI)?",
    "options": [
      "Teste manual contínuo",
      "Prática de integrar código frequentemente com testes automatizados",
      "Desenvolvimento sem testes",
      "Deploy manual"
    ],
    "correct": 1,
    "explanation": "Integração contínua é uma prática onde desenvolvedores integram código frequentemente, com testes automatizados executados a cada integração."
  },
  {
    "id": 51,
    "question": "O que é entrega contínua (CD)?",
    "options": [
      "Desenvolvimento contínuo",
      "Capacidade de entregar software de forma rápida e confiável",
      "Teste contínuo manual",
      "Codificação contínua"
    ],
    "correct": 1,
    "explanation": "Entrega contínua é a capacidade de entregar software de forma rápida, segura e sustentável através de automação e práticas de qualidade."
  },
  {
    "id": 52,
    "question": "O que é shift-left em testes?",
    "options": [
      "Mover testes para o final do ciclo",
      "Mover atividades de teste para fases anteriores do desenvolvimento",
      "Testar apenas no ambiente de produção",
      "Reduzir o número de testes"
    ],
    "correct": 1,
    "explanation": "Shift-left é a prática de mover atividades de teste para fases anteriores do ciclo de desenvolvimento para detectar defeitos mais cedo."
  },
  {
    "id": 53,
    "question": "O que é pirâmide de testes?",
    "options": [
      "Uma ferramenta de teste",
      "Estratégia que prioriza testes de unidade, depois integração, depois UI",
      "Um tipo de defeito",
      "Um ambiente de teste"
    ],
    "correct": 1,
    "explanation": "Pirâmide de testes é uma estratégia que recomenda mais testes de unidade (base), menos testes de integração (meio) e ainda menos testes de UI (topo)."
  },
  {
    "id": 54,
    "question": "O que é teste exploratório?",
    "options": [
      "Teste baseado apenas em scripts",
      "Teste simultâneo de aprendizado, design e execução",
      "Teste automatizado",
      "Teste de performance"
    ],
    "correct": 1,
    "explanation": "Teste exploratório é uma abordagem onde aprendizado, design de teste e execução acontecem simultaneamente, sem scripts predefinidos."
  },
  {
    "id": 55,
    "question": "O que é teste baseado em risco?",
    "options": [
      "Teste aleatório",
      "Priorização de testes baseada na probabilidade e impacto de falhas",
      "Teste apenas de funcionalidades críticas",
      "Teste sem planejamento"
    ],
    "correct": 1,
    "explanation": "Teste baseado em risco prioriza esforços de teste baseado na probabilidade de falha e impacto potencial de defeitos em diferentes áreas."
  },
  {
    "id": 56,
    "question": "O que é análise estática?",
    "options": [
      "Execução de código",
      "Análise de código sem executá-lo",
      "Teste de performance",
      "Teste de usabilidade"
    ],
    "correct": 1,
    "explanation": "Análise estática examina código, documentos ou outros artefatos sem executá-los, identificando defeitos potenciais."
  },
  {
    "id": 57,
    "question": "O que é análise dinâmica?",
    "options": [
      "Análise de código sem execução",
      "Análise através da execução do software",
      "Análise de requisitos",
      "Análise de documentação"
    ],
    "correct": 1,
    "explanation": "Análise dinâmica examina o comportamento do software durante sua execução, identificando defeitos através de testes."
  },
  {
    "id": 58,
    "question": "O que é um relatório de defeito?",
    "options": [
      "Um caso de teste",
      "Documento que descreve um defeito encontrado",
      "Um plano de teste",
      "Uma ferramenta de automação"
    ],
    "correct": 1,
    "explanation": "Relatório de defeito é um documento que descreve detalhadamente um defeito encontrado, incluindo passos para reproduzir e evidências."
  },
  {
    "id": 59,
    "question": "Quais informações são essenciais em um relatório de defeito?",
    "options": [
      "Apenas o título",
      "Título, descrição, passos para reproduzir, resultado esperado vs atual",
      "Apenas a severidade",
      "Apenas quem encontrou"
    ],
    "correct": 1,
    "explanation": "Um bom relatório de defeito deve incluir título claro, descrição detalhada, passos para reproduzir, resultado esperado vs atual, evidências e classificação."
  },
  {
    "id": 60,
    "question": "O que é severidade de um defeito?",
    "options": [
      "Quem encontrou o defeito",
      "Impacto do defeito no sistema ou usuário",
      "Quando o defeito foi encontrado",
      "Onde o defeito foi encontrado"
    ],
    "correct": 1,
    "explanation": "Severidade indica o impacto do defeito no sistema ou usuário, classificando quão sério é o problema encontrado."
  },
  {
    "id": 61,
    "question": "O que é prioridade de um defeito?",
    "options": [
      "Impacto técnico do defeito",
      "Urgência para correção do defeito",
      "Complexidade da correção",
      "Quem vai corrigir"
    ],
    "correct": 1,
    "explanation": "Prioridade indica a urgência para correção do defeito, considerando fatores de negócio e cronograma."
  },
  {
    "id": 62,
    "question": "Qual é a diferença entre severidade e prioridade?",
    "options": [
      "São a mesma coisa",
      "Severidade é impacto técnico, prioridade é urgência de negócio",
      "Severidade é urgência, prioridade é impacto",
      "Não há diferença prática"
    ],
    "correct": 1,
    "explanation": "Severidade refere-se ao impacto técnico do defeito, enquanto prioridade refere-se à urgência de correção do ponto de vista de negócio."
  },
  {
    "id": 63,
    "question": "O que é ciclo de vida de um defeito?",
    "options": [
      "Tempo para corrigir um defeito",
      "Estados pelos quais um defeito passa desde descoberta até fechamento",
      "Número de defeitos encontrados",
      "Complexidade do defeito"
    ],
    "correct": 1,
    "explanation": "Ciclo de vida de defeito são os diferentes estados pelos quais um defeito passa, como: novo, aberto, em análise, corrigido, testado, fechado."
  },
  {
    "id": 64,
    "question": "O que significa um defeito estar 'reaberto'?",
    "options": [
      "Foi encontrado um novo defeito",
      "A correção não resolveu o problema ou introduziu novos problemas",
      "O defeito foi duplicado",
      "O defeito foi rejeitado"
    ],
    "correct": 1,
    "explanation": "Um defeito é reaberto quando a correção implementada não resolve o problema original ou introduz novos problemas."
  },
  {
    "id": 65,
    "question": "O que é teste de API?",
    "options": [
      "Teste de interface gráfica",
      "Teste da camada de comunicação entre sistemas",
      "Teste de banco de dados",
      "Teste de performance"
    ],
    "correct": 1,
    "explanation": "Teste de API verifica a comunicação, funcionalidade, confiabilidade e performance das interfaces de programação de aplicações."
  },
  {
    "id": 66,
    "question": "O que são testes end-to-end (E2E)?",
    "options": [
      "Testes de unidade",
      "Testes que verificam fluxos completos do sistema",
      "Testes de código",
      "Testes de documentação"
    ],
    "correct": 1,
    "explanation": "Testes end-to-end verificam fluxos completos do sistema, desde a interface do usuário até o banco de dados, simulando cenários reais."
  },
  {
    "id": 67,
    "question": "O que é teste de compatibilidade?",
    "options": [
      "Teste de performance",
      "Teste em diferentes ambientes, browsers, dispositivos ou sistemas operacionais",
      "Teste de segurança",
      "Teste de usabilidade"
    ],
    "correct": 1,
    "explanation": "Teste de compatibilidade verifica se o software funciona corretamente em diferentes ambientes, browsers, dispositivos ou sistemas operacionais."
  },
  {
    "id": 68,
    "question": "O que é teste de acessibilidade?",
    "options": [
      "Teste de performance",
      "Teste para verificar se o software é usável por pessoas com deficiências",
      "Teste de segurança",
      "Teste de funcionalidade"
    ],
    "correct": 1,
    "explanation": "Teste de acessibilidade verifica se o software pode ser usado por pessoas com diferentes tipos de deficiências, seguindo padrões como WCAG."
  },
  {
    "id": 69,
    "question": "O que é teste de localização?",
    "options": [
      "Teste de GPS",
      "Teste de adaptação do software para diferentes idiomas e culturas",
      "Teste de rede",
      "Teste de performance"
    ],
    "correct": 1,
    "explanation": "Teste de localização verifica se o software foi adequadamente adaptado para diferentes idiomas, culturas e requisitos locais."
  },
  {
    "id": 70,
    "question": "O que é teste de instalação?",
    "options": [
      "Teste de funcionalidades",
      "Teste do processo de instalação, atualização e desinstalação",
      "Teste de performance",
      "Teste de segurança"
    ],
    "correct": 1,
    "explanation": "Teste de instalação verifica se o software pode ser instalado, atualizado e desinstalado corretamente em diferentes ambientes."
  },
  {
    "id": 71,
    "question": "O que é teste de recuperação?",
    "options": [
      "Teste de backup",
      "Teste da capacidade do sistema se recuperar de falhas",
      "Teste de performance",
      "Teste de funcionalidade"
    ],
    "correct": 1,
    "explanation": "Teste de recuperação verifica a capacidade do sistema se recuperar de falhas, crashes ou outros eventos inesperados."
  },
  {
    "id": 72,
    "question": "O que é teste de volume?",
    "options": [
      "Teste de áudio",
      "Teste com grandes quantidades de dados",
      "Teste de interface",
      "Teste de rede"
    ],
    "correct": 1,
    "explanation": "Teste de volume verifica o comportamento do sistema quando processando grandes quantidades de dados."
  },
  {
    "id": 73,
    "question": "O que é teste de configuração?",
    "options": [
      "Teste de código",
      "Teste em diferentes configurações de hardware e software",
      "Teste de interface",
      "Teste de documentação"
    ],
    "correct": 1,
    "explanation": "Teste de configuração verifica se o sistema funciona corretamente em diferentes configurações de hardware e software."
  },
  {
    "id": 74,
    "question": "O que é teste de migração?",
    "options": [
      "Teste de performance",
      "Teste da transferência de dados de um sistema para outro",
      "Teste de interface",
      "Teste de segurança"
    ],
    "correct": 1,
    "explanation": "Teste de migração verifica se dados e funcionalidades são transferidos corretamente de um sistema antigo para um novo."
  },
  {
    "id": 75,
    "question": "O que é teste de backup e restore?",
    "options": [
      "Teste de performance",
      "Teste dos processos de backup e restauração de dados",
      "Teste de interface",
      "Teste de funcionalidade"
    ],
    "correct": 1,
    "explanation": "Teste de backup e restore verifica se os processos de backup e restauração de dados funcionam corretamente e os dados são recuperáveis."
  },
  {
    "id": 76,
    "question": "O que é DevOps?",
    "options": [
      "Uma ferramenta de teste",
      "Cultura que integra desenvolvimento e operações",
      "Um tipo de teste",
      "Uma linguagem de programação"
    ],
    "correct": 1,
    "explanation": "DevOps é uma cultura e conjunto de práticas que integra desenvolvimento e operações para entregar software de forma mais rápida e confiável."
  },
  {
    "id": 77,
    "question": "Como QA se integra com DevOps?",
    "options": [
      "QA não tem relação com DevOps",
      "Através de automação, testes contínuos e feedback rápido",
      "Apenas no final do processo",
      "Apenas em ambiente de produção"
    ],
    "correct": 1,
    "explanation": "QA se integra com DevOps através de automação de testes, testes contínuos, feedback rápido e colaboração entre equipes."
  },
  {
    "id": 78,
    "question": "O que é infraestrutura como código (IaC)?",
    "options": [
      "Código de aplicação",
      "Gerenciamento de infraestrutura através de código",
      "Teste de código",
      "Documentação de código"
    ],
    "correct": 1,
    "explanation": "Infraestrutura como código é a prática de gerenciar e provisionar infraestrutura através de código, permitindo versionamento e automação."
  },
  {
    "id": 79,
    "question": "O que são containers em desenvolvimento?",
    "options": [
      "Variáveis de código",
      "Tecnologia de virtualização leve para empacotar aplicações",
      "Bancos de dados",
      "Interfaces gráficas"
    ],
    "correct": 1,
    "explanation": "Containers são uma tecnologia de virtualização leve que empacota aplicações com suas dependências, garantindo consistência entre ambientes."
  },
  {
    "id": 80,
    "question": "Como containers ajudam em testes?",
    "options": [
      "Não ajudam em testes",
      "Proporcionam ambientes consistentes e isolados",
      "Apenas para testes de performance",
      "Apenas para testes manuais"
    ],
    "correct": 1,
    "explanation": "Containers proporcionam ambientes consistentes, isolados e reproduzíveis para execução de testes, reduzindo problemas de 'funciona na minha máquina'."
  },
  {
    "id": 81,
    "question": "O que é monitoramento em produção?",
    "options": [
      "Teste manual em produção",
      "Observação contínua do comportamento do sistema em produção",
      "Desenvolvimento em produção",
      "Backup de produção"
    ],
    "correct": 1,
    "explanation": "Monitoramento em produção é a observação contínua do comportamento, performance e saúde do sistema em ambiente de produção."
  },
  {
    "id": 82,
    "question": "O que são métricas de qualidade?",
    "options": [
      "Apenas número de bugs",
      "Indicadores quantitativos da qualidade do software",
      "Apenas tempo de desenvolvimento",
      "Apenas satisfação do usuário"
    ],
    "correct": 1,
    "explanation": "Métricas de qualidade são indicadores quantitativos que ajudam a avaliar e monitorar a qualidade do software e processo de desenvolvimento."
  },
  {
    "id": 83,
    "question": "O que é densidade de defeitos?",
    "options": [
      "Número total de defeitos",
      "Número de defeitos por unidade de tamanho do software",
      "Tempo para corrigir defeitos",
      "Severidade dos defeitos"
    ],
    "correct": 1,
    "explanation": "Densidade de defeitos é uma métrica que indica o número de defeitos por unidade de tamanho do software (ex: defeitos por 1000 linhas de código)."
  },
  {
    "id": 84,
    "question": "O que é taxa de detecção de defeitos?",
    "options": [
      "Velocidade de correção",
      "Percentual de defeitos encontrados em teste vs produção",
      "Número de testadores",
      "Tempo de teste"
    ],
    "correct": 1,
    "explanation": "Taxa de detecção de defeitos mede o percentual de defeitos encontrados durante os testes em relação ao total de defeitos (incluindo os encontrados em produção)."
  },
  {
    "id": 85,
    "question": "O que é eficiência de remoção de defeitos?",
    "options": [
      "Velocidade de teste",
      "Percentual de defeitos removidos antes da entrega",
      "Número de defeitos corrigidos",
      "Tempo para corrigir"
    ],
    "correct": 1,
    "explanation": "Eficiência de remoção de defeitos mede o percentual de defeitos que foram encontrados e removidos antes da entrega ao usuário final."
  },
  {
    "id": 86,
    "question": "O que é MTBF (Mean Time Between Failures)?",
    "options": [
      "Tempo médio de teste",
      "Tempo médio entre falhas do sistema",
      "Tempo médio de desenvolvimento",
      "Tempo médio de correção"
    ],
    "correct": 1,
    "explanation": "MTBF é o tempo médio entre falhas consecutivas de um sistema, indicando sua confiabilidade."
  },
  {
    "id": 87,
    "question": "O que é MTTR (Mean Time To Repair)?",
    "options": [
      "Tempo médio de teste",
      "Tempo médio para reparar/corrigir uma falha",
      "Tempo médio de desenvolvimento",
      "Tempo médio entre falhas"
    ],
    "correct": 1,
    "explanation": "MTTR é o tempo médio necessário para reparar ou corrigir uma falha do sistema após sua detecção."
  },
  {
    "id": 88,
    "question": "O que é SLA (Service Level Agreement)?",
    "options": [
      "Um tipo de teste",
      "Acordo que define níveis de serviço esperados",
      "Uma ferramenta de automação",
      "Um processo de desenvolvimento"
    ],
    "correct": 1,
    "explanation": "SLA é um acordo que define os níveis de serviço esperados, incluindo disponibilidade, performance e outros critérios de qualidade."
  },
  {
    "id": 89,
    "question": "O que é teste A/B?",
    "options": [
      "Teste de duas versões diferentes para comparar resultados",
      "Teste alfabético",
      "Teste de duas pessoas",
      "Teste de duas funcionalidades"
    ],
    "correct": 0,
    "explanation": "Teste A/B compara duas versões diferentes de um produto ou funcionalidade para determinar qual performa melhor com usuários reais."
  },
  {
    "id": 90,
    "question": "O que é feature flag (feature toggle)?",
    "options": [
      "Um tipo de defeito",
      "Técnica para ativar/desativar funcionalidades sem deploy",
      "Uma ferramenta de teste",
      "Um ambiente de teste"
    ],
    "correct": 1,
    "explanation": "Feature flag é uma técnica que permite ativar ou desativar funcionalidades em tempo de execução sem necessidade de novo deploy."
  },
  {
    "id": 91,
    "question": "O que é canary deployment?",
    "options": [
      "Deploy completo",
      "Deploy gradual para um subconjunto de usuários",
      "Deploy apenas em teste",
      "Deploy manual"
    ],
    "correct": 1,
    "explanation": "Canary deployment é uma estratégia de deploy gradual onde uma nova versão é liberada para um pequeno subconjunto de usuários antes do rollout completo."
  },
  {
    "id": 92,
    "question": "O que é blue-green deployment?",
    "options": [
      "Deploy colorido",
      "Estratégia com dois ambientes idênticos para deploy sem downtime",
      "Deploy apenas em desenvolvimento",
      "Deploy manual"
    ],
    "correct": 1,
    "explanation": "Blue-green deployment usa dois ambientes de produção idênticos, permitindo deploy sem downtime ao alternar entre eles."
  },
  {
    "id": 93,
    "question": "O que é rollback?",
    "options": [
      "Avançar para próxima versão",
      "Retornar para versão anterior após problemas",
      "Testar nova versão",
      "Fazer backup"
    ],
    "correct": 1,
    "explanation": "Rollback é o processo de retornar para uma versão anterior do software quando problemas são detectados na versão atual."
  },
  {
    "id": 94,
    "question": "O que é observabilidade?",
    "options": [
      "Apenas monitoramento",
      "Capacidade de entender o estado interno do sistema através de outputs",
      "Apenas logs",
      "Apenas métricas"
    ],
    "correct": 1,
    "explanation": "Observabilidade é a capacidade de entender o estado interno de um sistema através de seus outputs externos (logs, métricas, traces)."
  },
  {
    "id": 95,
    "question": "Quais são os três pilares da observabilidade?",
    "options": [
      "Código, teste, deploy",
      "Logs, métricas e traces",
      "Frontend, backend, banco",
      "Dev, test, prod"
    ],
    "correct": 1,
    "explanation": "Os três pilares da observabilidade são: logs (eventos discretos), métricas (dados numéricos agregados) e traces (jornada de requisições)."
  },
  {
    "id": 96,
    "question": "O que é chaos engineering?",
    "options": [
      "Desenvolvimento desorganizado",
      "Prática de introduzir falhas controladas para testar resiliência",
      "Teste aleatório",
      "Desenvolvimento sem planejamento"
    ],
    "correct": 1,
    "explanation": "Chaos engineering é a prática de introduzir falhas controladas em sistemas para testar e melhorar sua resiliência e capacidade de recuperação."
  },
  {
    "id": 97,
    "question": "O que é site reliability engineering (SRE)?",
    "options": [
      "Apenas desenvolvimento",
      "Disciplina que aplica princípios de engenharia para operações",
      "Apenas testes",
      "Apenas monitoramento"
    ],
    "correct": 1,
    "explanation": "SRE é uma disciplina que aplica princípios de engenharia de software para problemas de operações, focando em confiabilidade e escalabilidade."
  },
  {
    "id": 98,
    "question": "O que é error budget em SRE?",
    "options": [
      "Orçamento para correções",
      "Quantidade aceitável de erros/downtime",
      "Número de desenvolvedores",
      "Tempo de desenvolvimento"
    ],
    "correct": 1,
    "explanation": "Error budget é a quantidade aceitável de erros ou downtime que um serviço pode ter, balanceando confiabilidade com velocidade de inovação."
  },
  {
    "id": 99,
    "question": "O que é postmortem em engenharia?",
    "options": [
      "Reunião de planejamento",
      "Análise detalhada após incidentes para aprender e melhorar",
      "Teste final",
      "Deploy de emergência"
    ],
    "correct": 1,
    "explanation": "Postmortem é uma análise detalhada e sem culpa realizada após incidentes para entender causas, impactos e definir ações de melhoria."
  },
  {
    "id": 100,
    "question": "Qual é o princípio fundamental do QA moderno?",
    "options": [
      "Encontrar todos os bugs possíveis",
      "Colaboração, prevenção e melhoria contínua",
      "Apenas automação de testes",
      "Apenas testes manuais"
    ],
    "correct": 1,
    "explanation": "O QA moderno foca em colaboração entre equipes, prevenção de defeitos através de boas práticas e melhoria contínua dos processos e qualidade."
  }
]

