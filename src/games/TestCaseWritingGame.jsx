import { useState, useEffect } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Progress } from '@/components/ui/progress'
import { Textarea } from '@/components/ui/textarea'
import { FileText, CheckCircle, XCircle, RotateCcw, Trophy, Clock, Target, Lightbulb } from 'lucide-react'

const TestCaseWritingGame = () => {
  const [currentScenario, setCurrentScenario] = useState(0)
  const [userTestCase, setUserTestCase] = useState('')
  const [showResult, setShowResult] = useState(false)
  const [gameFinished, setGameFinished] = useState(false)
  const [score, setScore] = useState(0)
  const [timeLeft, setTimeLeft] = useState(300) // 5 minutes
  const [gameStarted, setGameStarted] = useState(false)
  const [feedback, setFeedback] = useState('')

  const scenarios = [
    {
      id: 1,
      title: "Tela de Login",
      description: "Escreva casos de teste para uma tela de login com campos de email e senha",
      requirements: [
        "Campo de email obrigat√≥rio",
        "Campo de senha obrigat√≥rio",
        "Valida√ß√£o de formato de email",
        "Senha deve ter no m√≠nimo 8 caracteres",
        "Bot√£o de login deve estar habilitado apenas com campos preenchidos"
      ],
      difficulty: "Iniciante",
      expectedElements: [
        "pr√©-condi√ß√µes",
        "passos",
        "resultado esperado",
        "dados de teste",
        "valida√ß√£o"
      ],
      sampleTestCase: `
**Caso de Teste: CT001 - Login com credenciais v√°lidas**

**Pr√©-condi√ß√µes:**
- Usu√°rio possui conta v√°lida no sistema
- Sistema est√° acess√≠vel

**Passos:**
1. Acessar a tela de login
2. Inserir email v√°lido no campo "Email"
3. Inserir senha v√°lida no campo "Senha"
4. Clicar no bot√£o "Entrar"

**Resultado Esperado:**
- Usu√°rio √© redirecionado para a p√°gina principal
- Mensagem de boas-vindas √© exibida

**Dados de Teste:**
- Email: usuario@teste.com
- Senha: senha123456
      `
    },
    {
      id: 2,
      title: "Formul√°rio de Cadastro",
      description: "Crie casos de teste para um formul√°rio de cadastro de usu√°rio",
      requirements: [
        "Nome completo obrigat√≥rio",
        "Email √∫nico no sistema",
        "Senha com crit√©rios de seguran√ßa",
        "Confirma√ß√£o de senha",
        "Aceite dos termos de uso obrigat√≥rio"
      ],
      difficulty: "Intermedi√°rio",
      expectedElements: [
        "cen√°rio positivo",
        "cen√°rio negativo",
        "valida√ß√µes",
        "mensagens de erro",
        "dados limite"
      ],
      sampleTestCase: `
**Caso de Teste: CT002 - Cadastro com dados v√°lidos**

**Pr√©-condi√ß√µes:**
- Sistema est√° acess√≠vel
- Email n√£o est√° cadastrado no sistema

**Passos:**
1. Acessar a tela de cadastro
2. Preencher campo "Nome" com nome v√°lido
3. Preencher campo "Email" com email v√°lido
4. Preencher campo "Senha" com senha que atende crit√©rios
5. Confirmar senha no campo "Confirmar Senha"
6. Marcar checkbox "Aceito os termos"
7. Clicar em "Cadastrar"

**Resultado Esperado:**
- Cadastro realizado com sucesso
- Mensagem de confirma√ß√£o exibida
- Email de verifica√ß√£o enviado

**Dados de Teste:**
- Nome: Jo√£o Silva Santos
- Email: joao.silva@email.com
- Senha: MinhaSenh@123
      `
    },
    {
      id: 3,
      title: "Carrinho de Compras",
      description: "Desenvolva casos de teste para funcionalidades de carrinho de e-commerce",
      requirements: [
        "Adicionar produtos ao carrinho",
        "Alterar quantidade de itens",
        "Remover itens do carrinho",
        "Calcular total com impostos",
        "Aplicar cupons de desconto"
      ],
      difficulty: "Avan√ßado",
      expectedElements: [
        "m√∫ltiplos cen√°rios",
        "c√°lculos matem√°ticos",
        "integra√ß√£o",
        "performance",
        "usabilidade"
      ],
      sampleTestCase: `
**Caso de Teste: CT003 - Adicionar produto ao carrinho**

**Pr√©-condi√ß√µes:**
- Usu√°rio logado no sistema
- Produto dispon√≠vel em estoque
- Carrinho vazio

**Passos:**
1. Navegar para p√°gina do produto
2. Verificar informa√ß√µes do produto (pre√ßo, descri√ß√£o)
3. Selecionar quantidade desejada
4. Clicar em "Adicionar ao Carrinho"
5. Verificar carrinho atualizado

**Resultado Esperado:**
- Produto adicionado ao carrinho
- Quantidade correta exibida
- Subtotal calculado corretamente
- Contador do carrinho atualizado

**Dados de Teste:**
- Produto: Smartphone XYZ
- Quantidade: 2 unidades
- Pre√ßo unit√°rio: R$ 899,90
      `
    }
  ]

  // Timer effect
  useEffect(() => {
    if (gameStarted && !gameFinished && timeLeft > 0) {
      const timer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000)
      return () => clearTimeout(timer)
    } else if (timeLeft === 0 && !showResult) {
      finishScenario()
    }
  }, [timeLeft, gameStarted, gameFinished, showResult])

  const startGame = () => {
    setGameStarted(true)
    setCurrentScenario(0)
    setScore(0)
    setUserTestCase('')
    setShowResult(false)
    setGameFinished(false)
    setTimeLeft(300)
    setFeedback('')
  }

  const analyzeTestCase = (testCase) => {
    const scenario = scenarios[currentScenario]
    let points = 0
    let feedbackItems = []

    // Check for expected elements
    scenario.expectedElements.forEach(element => {
      const elementPatterns = {
        'pr√©-condi√ß√µes': /pr√©.?condi√ß√µes|precondi√ß√µes|pr√©.?requisitos/i,
        'passos': /passos|etapas|procedimento/i,
        'resultado esperado': /resultado.?esperado|expected.?result/i,
        'dados de teste': /dados.?de.?teste|test.?data/i,
        'valida√ß√£o': /valida√ß√£o|verifica√ß√£o|validar/i,
        'cen√°rio positivo': /cen√°rio.?positivo|caso.?positivo|fluxo.?principal/i,
        'cen√°rio negativo': /cen√°rio.?negativo|caso.?negativo|fluxo.?alternativo/i,
        'mensagens de erro': /mensagem.?de.?erro|error.?message/i,
        'dados limite': /dados.?limite|boundary.?value|valor.?limite/i,
        'm√∫ltiplos cen√°rios': /m√∫ltiplos|v√°rios|diferentes/i,
        'c√°lculos matem√°ticos': /c√°lculo|total|soma|subtotal/i,
        'integra√ß√£o': /integra√ß√£o|integration/i,
        'performance': /performance|tempo.?de.?resposta/i,
        'usabilidade': /usabilidade|experi√™ncia|interface/i
      }

      if (elementPatterns[element] && elementPatterns[element].test(testCase)) {
        points += 10
        feedbackItems.push(`‚úÖ Incluiu ${element}`)
      } else {
        feedbackItems.push(`‚ùå Faltou ${element}`)
      }
    })

    // Bonus points for structure
    if (testCase.length > 100) {
      points += 10
      feedbackItems.push('‚úÖ Caso de teste detalhado')
    }

    if (/\d+\./.test(testCase)) {
      points += 5
      feedbackItems.push('‚úÖ Passos numerados')
    }

    return { points, feedback: feedbackItems.join('\n') }
  }

  const finishScenario = () => {
    setShowResult(true)
    
    const analysis = analyzeTestCase(userTestCase)
    const timeBonus = Math.floor(timeLeft / 30)
    const finalScore = analysis.points + timeBonus
    
    setScore(score + finalScore)
    setFeedback(analysis.feedback)
  }

  const nextScenario = () => {
    if (currentScenario < scenarios.length - 1) {
      setCurrentScenario(currentScenario + 1)
      setUserTestCase('')
      setShowResult(false)
      setTimeLeft(300)
      setFeedback('')
    } else {
      setGameFinished(true)
      // Save score
      const savedBestScore = localStorage.getItem('qaplay-testcase-best-score')
      if (!savedBestScore || score > parseInt(savedBestScore)) {
        localStorage.setItem('qaplay-testcase-best-score', score.toString())
      }
    }
  }

  const resetGame = () => {
    setGameStarted(false)
    setCurrentScenario(0)
    setScore(0)
    setUserTestCase('')
    setShowResult(false)
    setGameFinished(false)
    setTimeLeft(300)
    setFeedback('')
  }

  const getDifficultyColor = (difficulty) => {
    switch (difficulty) {
      case 'Iniciante': return 'bg-green-100 text-green-800'
      case 'Intermedi√°rio': return 'bg-yellow-100 text-yellow-800'
      case 'Avan√ßado': return 'bg-red-100 text-red-800'
      default: return 'bg-gray-100 text-gray-800'
    }
  }

  const getScoreMessage = () => {
    const maxScore = scenarios.reduce((acc, scenario) => acc + (scenario.expectedElements.length * 10 + 15), 0)
    const percentage = (score / maxScore) * 100
    
    if (percentage >= 90) return "Excelente! Voc√™ escreve casos de teste como um expert! üìù"
    if (percentage >= 70) return "Muito bom! Seus casos de teste est√£o bem estruturados! üéØ"
    if (percentage >= 50) return "Bom trabalho! Continue praticando a escrita! üìö"
    return "Continue estudando! A pr√°tica leva √† perfei√ß√£o! üí™"
  }

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60)
    const secs = seconds % 60
    return `${mins}:${secs.toString().padStart(2, '0')}`
  }

  if (!gameStarted) {
    return (
      <div className="max-w-2xl mx-auto space-y-6">
        <Card className="text-center">
          <CardHeader>
            <div className="w-16 h-16 bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center mx-auto mb-4">
              <FileText className="h-8 w-8 text-white" />
            </div>
            <CardTitle className="text-2xl">Escrita de Casos de Teste</CardTitle>
            <CardDescription className="text-lg">
              Pratique a escrita de casos de teste estruturados e detalhados
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="text-center">
                <div className="text-2xl font-bold text-primary">{scenarios.length}</div>
                <div className="text-sm text-muted-foreground">Cen√°rios</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-primary">5min</div>
                <div className="text-sm text-muted-foreground">Por cen√°rio</div>
              </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-primary">
                  {localStorage.getItem('qaplay-testcase-best-score') || 0}
                </div>
                <div className="text-sm text-muted-foreground">Melhor pontua√ß√£o</div>
              </div>
            </div>
            
            <div className="space-y-4">
              <h3 className="font-semibold">Como jogar:</h3>
              <ul className="text-sm text-muted-foreground space-y-2 text-left">
                <li>‚Ä¢ Leia os requisitos do cen√°rio</li>
                <li>‚Ä¢ Escreva um caso de teste completo</li>
                <li>‚Ä¢ Inclua pr√©-condi√ß√µes, passos e resultados esperados</li>
                <li>‚Ä¢ Ganhe pontos por estrutura e completude</li>
              </ul>
            </div>
            
            <Button onClick={startGame} size="lg" className="w-full">
              <FileText className="mr-2 h-5 w-5" />
              Come√ßar Escrita
            </Button>
          </CardContent>
        </Card>
      </div>
    )
  }

  if (gameFinished) {
    return (
      <div className="max-w-2xl mx-auto space-y-6">
        <Card className="text-center">
          <CardHeader>
            <div className="w-16 h-16 bg-gradient-to-r from-yellow-500 to-orange-600 rounded-full flex items-center justify-center mx-auto mb-4">
              <Trophy className="h-8 w-8 text-white" />
            </div>
            <CardTitle className="text-2xl">Escrita Conclu√≠da!</CardTitle>
            <CardDescription className="text-lg">
              {getScoreMessage()}
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="grid grid-cols-2 gap-4">
              <div className="text-center">
                <div className="text-3xl font-bold text-primary">{score}</div>
                <div className="text-sm text-muted-foreground">Pontua√ß√£o Final</div>
              </div>
              <div className="text-center">
                <div className="text-3xl font-bold text-primary">{scenarios.length}</div>
                <div className="text-sm text-muted-foreground">Cen√°rios Conclu√≠dos</div>
              </div>
            </div>
            
            <div className="flex gap-4">
              <Button onClick={resetGame} variant="outline" className="flex-1">
                <RotateCcw className="mr-2 h-4 w-4" />
                Escrever Novamente
              </Button>
              <Button onClick={() => window.history.back()} className="flex-1">
                Voltar aos Jogos
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    )
  }

  const currentScenarioData = scenarios[currentScenario]
  const progress = ((currentScenario + 1) / scenarios.length) * 100

  return (
    <div className="max-w-4xl mx-auto space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div className="flex items-center space-x-4">
          <Badge variant="outline">
            Cen√°rio {currentScenario + 1} de {scenarios.length}
          </Badge>
          <Badge className={getDifficultyColor(currentScenarioData.difficulty)}>
            {currentScenarioData.difficulty}
          </Badge>
        </div>
        <div className="flex items-center space-x-4">
          <div className="flex items-center space-x-2">
            <Clock className="h-4 w-4" />
            <span className={`font-mono ${timeLeft <= 60 ? 'text-red-500' : ''}`}>
              {formatTime(timeLeft)}
            </span>
          </div>
          <div className="flex items-center space-x-2">
            <Trophy className="h-4 w-4" />
            <span className="font-semibold">{score}</span>
          </div>
        </div>
      </div>

      {/* Progress */}
      <Progress value={progress} className="h-2" />

      {/* Scenario */}
      <Card>
        <CardHeader>
          <CardTitle className="text-xl">{currentScenarioData.title}</CardTitle>
          <CardDescription>{currentScenarioData.description}</CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* Requirements */}
          <div className="space-y-3">
            <h4 className="font-semibold">Requisitos:</h4>
            <ul className="space-y-1">
              {currentScenarioData.requirements.map((req, index) => (
                <li key={index} className="flex items-center space-x-2">
                  <Target className="h-4 w-4 text-primary" />
                  <span className="text-sm">{req}</span>
                </li>
              ))}
            </ul>
          </div>

          {/* Test Case Input */}
          <div className="space-y-3">
            <h4 className="font-semibold">Escreva seu caso de teste:</h4>
            <Textarea
              placeholder="Digite seu caso de teste aqui... Inclua pr√©-condi√ß√µes, passos detalhados, resultado esperado e dados de teste."
              value={userTestCase}
              onChange={(e) => setUserTestCase(e.target.value)}
              className="min-h-[300px]"
              disabled={showResult}
            />
            <div className="text-sm text-muted-foreground">
              Caracteres: {userTestCase.length}
            </div>
          </div>

          {/* Results */}
          {showResult && (
            <div className="space-y-4">
              <div className="bg-muted rounded-lg p-4">
                <h4 className="font-semibold mb-3">Feedback:</h4>
                <pre className="text-sm whitespace-pre-wrap">{feedback}</pre>
              </div>
              
              <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                <h4 className="font-semibold text-blue-900 mb-2 flex items-center">
                  <Lightbulb className="h-4 w-4 mr-2" />
                  Exemplo de caso de teste:
                </h4>
                <pre className="text-blue-800 text-sm whitespace-pre-wrap">
                  {currentScenarioData.sampleTestCase}
                </pre>
              </div>
              
              <Button onClick={nextScenario} className="w-full" size="lg">
                {currentScenario < scenarios.length - 1 ? 'Pr√≥ximo Cen√°rio' : 'Ver Resultado Final'}
              </Button>
            </div>
          )}

          {!showResult && (
            <Button 
              onClick={finishScenario} 
              className="w-full" 
              size="lg"
              disabled={userTestCase.length < 50}
            >
              Avaliar Caso de Teste
            </Button>
          )}
        </CardContent>
      </Card>
    </div>
  )
}

export default TestCaseWritingGame

